buildscript {
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release-local' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1'
    }
}

plugins {
    id 'application'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '1.2.0'
}

apply plugin: 'propdeps-maven'
apply plugin: 'com.jfrog.artifactory-upload'

sourceCompatibility = 1.7

mainClassName = 'testUDP.UDPServer'

ext.generatedSrcDir = file('./')

sourceSets.main.java.srcDirs += generatedSrcDir

test {
    systemProperty "file.encoding", "UTF-8"
    jvmArgs '-Xss16m'
}

ext {
    slf4jVersion = '1.7.7'
    leveldbVersion = '0.7'
    scastleVersion = '1.51.0.0'
    log4jVersion = '1.2.17'
    springVersion = '4.1.2.RELEASE'
    hibernateVersion = '4.3.7.Final'
    junitVersion = '4.11'
}

dependencies {

//    compile "com.barchart.udt:barchart-udt-bundle:2.3.0"
    compile files('../barchart-udt/barchart-udt-core/target/barchart-udt-core-2.3.1-SNAPSHOT.jar')
    compile files('../barchart-udt/barchart-udt-core/target/barchart-udt-core-2.3.1-SNAPSHOT-sources.jar')
    compile "io.netty:netty-all:4.0.23.Final"
    compile "log4j:log4j:${log4jVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    optional "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    optional "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    optional "log4j:apache-log4j-extras:${log4jVersion}"
}

javadoc {
    options.author = true
    options.header = project.name
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
    options.encoding = "UTF-8"
    options.links(
            "http://docs.oracle.com/javase/8/docs/api/",
            "http://netty.io/4.0/api/"
    )
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

def bintrayUsername = project.hasProperty('bintrayUser') ? project.bintrayUser : ''
def bintrayPassword = project.hasProperty('bintrayKey') ? project.bintrayKey : ''
def pullRequest = System.getenv('TRAVIS_PULL_REQUEST')

artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = bintrayUsername
            password = bintrayPassword
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }

}

artifactoryPublish.onlyIf {
    (!pullRequest || pullRequest == 'false') && project.version.endsWith('-SNAPSHOT')
}


install {
    repositories.mavenInstaller {
        customizePom(pom, project)
    }
}


def customizePom(pom, gradleProject) {
    pom.whenConfigured { generatedPom ->
        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // sort to make pom dependencies order consistent to ease comparison of older poms
        generatedPom.dependencies = generatedPom.dependencies.sort { dep ->
            "$dep.scope:$dep.groupId:$dep.artifactId"
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = "ethereumj"
            description = "Java implementation of the Ethereum protocol"
            url = "https://github.com/ethereum/ethereumj"
            organization {
                name = "Ethereum"
                url = "https://ethereum.org"
            }
            licenses {
                license {
                    name "The MIT License"
                    url "http://mit-license.org/"
                    distribution "repo"
                }
            }
            scm {
                url = "https://github.com/ethereum/ethereumj"
                connection = "scm:git:git://github.com/ethereum/ethereumj"
                developerConnection = "scm:git:git://github.com/ethereum/ethereumj"
            }
            developers {
                developer {
                    id = "rmandeleil"
                    name = "Roman Mandeleil"
                    email = "roman.mandeleil@gmail.com"
                }
            }
            issueManagement {
                system = "GitHub Issues"
                url = "https://github.com/ethereum/ethereumj/issues"
            }
        }
    }
}
